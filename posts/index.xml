<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog on Markus Engsner</title>
    <link>https://engsner.com/posts/</link>
    <description>Markus Engsner (My Blog)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 May 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://engsner.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>July Update</title>
      <link>https://engsner.com/posts/july-update/</link>
      <pubDate>Mon, 03 Aug 2020 20:18:20 +0200</pubDate>
      
      <guid>https://engsner.com/posts/july-update/</guid>
      <description>&lt;p&gt;July is over, and I figured I would try to write a couple of words to summarize the month,
as well as to try to set some goals for the coming month. This is mostly done for myself,
in an attempt to keep myself accountable.&lt;/p&gt;
&lt;h2 id=&#34;embedded-development&#34;&gt;Embedded Development&lt;/h2&gt;
&lt;p&gt;The main theme of the month has been embedded programming.
Not just for work, but also in my spare time. Unfortunately, what I&amp;rsquo;ve found is that the more I do something for work,
the less I want to do it for the rest of the day.
And since both work-programming and fun-programming has been on the same architecture (STM32!),
I haven&amp;rsquo;t made that much progress on the &lt;a href=&#34;https://github.com/Sunkworks/rocket&#34;&gt;rocketry&lt;/a&gt;.
It&amp;rsquo;s kind of fascinating actually. Even when doing embedded programming for two very different projects,
it&amp;rsquo;s still very much the same. Read some data from SPI, process the data, figure out if an output MOSFET should be turned high or low&amp;hellip;&lt;/p&gt;
&lt;p&gt;That being said, I have tried to mix it up a little.
Since I&amp;rsquo;m a lot more free in trying stuff out when not doing it for work,
I have been writing that code in C++ instead, trying to make it as close to modern idiomatic C++ as possible.
The issue I have ran into though, is that trying to make idiomatic C++ interoperate with underlying C code from the STM32 libraries is easier said than done.&lt;/p&gt;
&lt;p&gt;Take for example enums. Idiomatic C++ means using &lt;code&gt;class enum&lt;/code&gt;, instead of the older C-style plain &lt;code&gt;enums&lt;/code&gt;.
The reason for this being that they don&amp;rsquo;t degrade to ints as easily, giving off compiler errors instead.
But the issue with this for me has been that when I try to call functions from the STM32 HAL,
they expect a plain &lt;code&gt;uint8_t&lt;/code&gt;, and not a user-defined &lt;code&gt;enum&lt;/code&gt;.
I didn&amp;rsquo;t come up with any solution that didn&amp;rsquo;t degrade the readability and conciseness of the code,
so in the end I resorted to C-style &lt;code&gt;enums&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;A big improvement with C++ though, is the usage of classes.
I have found that a lot of embedded code is naturally object-oriented.
As an example, let&amp;rsquo;s say you are writing a driver for an IMU. Communication is done over SPI.
Using the STM32 HAL, you have to pass a SPI handler to their write function. Since most STM32 MCUs have multiple SPI channels,
you can&amp;rsquo;t just make it a global. You also have to know which pin is used for chip select,
which means you need another two variables if using the STM32 HAL.
The solution to this in C is to pass a struct around:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ImuConfig&lt;/span&gt; {
  GPIO_TypeDef &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;NSS_GPIO;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; NSS_Pin;         &lt;span style=&#34;color:#75715e&#34;&gt;// Chip select pin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  SPI_HandleTypeDef &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hspi;  &lt;span style=&#34;color:#75715e&#34;&gt;// SPI handler
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};	

&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getAcceleration&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ImuConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;imu_io) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// Do stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imuRead(imu_io, kAccelReg);
  &lt;span style=&#34;color:#75715e&#34;&gt;// Do more stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This quickly gets tedious, especially if calling functions with a lot of other parameters.
Using C++ instead, one can easily bake this into a class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IMU&lt;/span&gt; {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; getAcceleration(){
    &lt;span style=&#34;color:#75715e&#34;&gt;// Do stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imuRead(MPU9250&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;kAccelReg);
    &lt;span style=&#34;color:#75715e&#34;&gt;// Do more stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }

 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  GPIO_TypeDef NSS_GPIO;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; NSS_Pin;         &lt;span style=&#34;color:#75715e&#34;&gt;// Chip select pin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  SPI_HandleTypeDef &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hspi;  &lt;span style=&#34;color:#75715e&#34;&gt;// SPI handler
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  imuRead(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; reg);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With C++, it simply becomes a lot cleaner, especially when dealing with many instances of the same sensor or module.
Another benefit of C++ is namespaces. Instead of cluttering the global namespaces with hundreds of registers for various devices,
one can simply put them in different namespaces (see the &lt;code&gt;imuRead&lt;/code&gt; call in the C++ code).&lt;/p&gt;
&lt;p&gt;The only thing I&amp;rsquo;m a little worried about with my C++ code is using it with more C libraries.
The HAL has worked out fine after ditching &lt;code&gt;class enum&lt;/code&gt;, but apparently FreeRTOS is a different beast.
I haven&amp;rsquo;t gotten quite that far yet though&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;scala-and-the-java-platform&#34;&gt;Scala (and the Java Platform&amp;hellip;)&lt;/h2&gt;
&lt;p&gt;After accidently stumbling upon a glowing recommendation of a Scala MOOC in a Hacker News thread,
I decided to finally try to grok functional programming. The course in question is &lt;em&gt;Functional Programming Principles in Scala&lt;/em&gt;,
and is given by Martin Odersky (EPFL), the founder of Scala. Just this evening I finished week 4 of 6, and it&amp;rsquo;s been really great so far.
In addition to doing the programming assignments that are part of the course, I have also tried to come up with some other projects,
to get more comfortable with the language. This led to the creation of &lt;a href=&#34;https://github.com/MarkusEngsner/ArxivRenamer&#34;&gt;ArxivRenamer&lt;/a&gt;,
a program that renames articles downloaded from arXiv to more readable names.
I was really impressed by the entire scala ecosystem, and how easy it is to add dependencies.
However, when I was ready to finally package the program, the Java platform shocked me.
30MB for such a small program!&lt;br&gt;
Oh well, I guess you can&amp;rsquo;t have everything.&lt;/p&gt;
&lt;p&gt;Having finished the first working version of the renamer, I decided to try to write a firefox extension too.
The idea was to write it using scala.js, which would then transpile it to JavaScript. However, I had issues
with getting bindings for some of the Firefox APIs, so I gave up on that effort.&lt;/p&gt;
&lt;p&gt;Instead, I tried to write a game using &lt;a href=&#34;https://indigoengine.io/&#34;&gt;Indigo&lt;/a&gt;.
I haven&amp;rsquo;t gotten very far yet, but it&amp;rsquo;s been going okay.
It has all the usual issues with using libraries that aren&amp;rsquo;t very mature yet (breaking API updates, partial lack of documentation&amp;hellip;),
but overall it&amp;rsquo;s been a pleasant experience.
Since compiling is very fast, it&amp;rsquo;s easy to just make some small changes and to iterate quickly on changes.&lt;/p&gt;
&lt;h2 id=&#34;looking-forward-august&#34;&gt;Looking forward: August&lt;/h2&gt;
&lt;p&gt;Scala and embedded sums up my month quite well.
Now we get to the section on what I&amp;rsquo;m planning to get done for during the next month.&lt;br&gt;
My main focus at the moment is Scala. I want to finish the MOOC during this month,
and continue to write more Scala code.
My lack of creativity in writing games might lead to me running out of steam on that front,
but I have some other ideas as well. Hopefully there will be a post involving music and &lt;a href=&#34;https://en.wikipedia.org/wiki/Erd%C5%91s_number&#34;&gt;Erdős number&lt;/a&gt; in the coming weeks, so stay tuned!&lt;/p&gt;
&lt;p&gt;When I finish the Scala course, I&amp;rsquo;m planning to continue my self-study in Computer Science.
I haven&amp;rsquo;t decided what topic I will try to learn next, but I have a couple of ideas in my head.
First off, we have Computer Architecture. I&amp;rsquo;m also considering doing the follow-up course on Scala from EPFL.
That&amp;rsquo;s not really as much Computer Science as it is programming though, so to Computer Architecture seems more likely at the moment.
Having recently bought the classic book &lt;em&gt;Structure and Interpretation of Computer Programs&lt;/em&gt;, I also want to work through that.
But that too is more programming than Computer Science, so the same arguments goes for that.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://engsner.com/images/monthly/sicp-696x1000.jpg&#34;
         alt=&#34;The classic.&#34; width=&#34;50%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;em&gt;The&lt;/em&gt; classic.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Towards the end of month, I&amp;rsquo;m also going to enrol in courses on logic and German at my local university.
We will see how it goes, but I&amp;rsquo;m looking forward to it!&lt;/p&gt;
&lt;p&gt;I have gotten out of the habit of reading recently, which is something I would like to get back into.
I&amp;rsquo;m hoping to finish &lt;em&gt;Die Wolke&lt;/em&gt; and &lt;em&gt;Steppenwolf&lt;/em&gt; this month (both in German), as a warm-up for the university course.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repairing a Technics SU-800 amplifier</title>
      <link>https://engsner.com/posts/su-800-repair/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engsner.com/posts/su-800-repair/</guid>
      <description>&lt;p&gt;Back in February, I started repairing an old Technics amplifier we had lying around.
While it worked for a short while after being turned on, the sound quickly dropped out.
After some digging around, I found the service manual and schematic for it, and started troubleshooting.
I removed the amplifier from it&amp;rsquo;s casing, and reassembled it in a more debug-friendly way on my workbench
(see picture).
&lt;figure&gt;
    &lt;img src=&#34;https://engsner.com/images/su-800/amplifier.jpg&#34;
         alt=&#34;The amplifier, reassembled without enclosure.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;The amplifier, reassembled without enclosure.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I came across some old forum threads, which seemed to indicate that it could be a problem with a relay.
This turned out to be the case, and luckily I found a seller from Germany selling the same part,
&lt;a href=&#34;https://www.ebay.com/itm/112254403859&#34;&gt;SSY-126&lt;/a&gt;,
but with a transparent enclosure.
I ordered two pieces, but didn&amp;rsquo;t have the time to install it when it came in the mail.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://engsner.com/images/su-800/SSY-126.jpg&#34;
         alt=&#34;Picture of relay&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;The replacement relay I ordered off eBay.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now, a couple of months later, I finally found the time to take care of it.
I managed to (with some trouble) desolder the relay. I had to cut two of the legs of the replacement relay,
in order for it to fit.
Having soldered the new relay in to place, I tested the amplifier. It worked!
It was now time to reassemble the amplifier.
This was easier said than done, due to the input select buttons being very hard to get into place.
I did eventually manage to put them back, by lifting and rotating the main PCB back and forth,
while at the same time trying to push the buttons with some force.
Not the most elegant solution, but it worked.
&lt;figure&gt;
    &lt;img src=&#34;https://engsner.com/images/su-800/relay-compare.jpg&#34;
         alt=&#34;The two relays next to each other.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;The old relay (right) and the new one (left)&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This is where I made a silly mistake, which cost me quite some time.
In my haste to get it back together, I never tested the amplifier before fully reassembling it.
So when I finally plugged it in and pressed the power button, nothing happened.
Time to take it apart again!
Turns out I had cut a jumper off between two of the first PCBs.
&lt;figure&gt;
    &lt;img src=&#34;https://engsner.com/images/su-800/jumper-cable.jpg&#34;
         alt=&#34;A jumper cable between two of the PCBs.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;The solution!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

To remedy this, I soldered a short piece of 14 AWG wire in its place.
This seemed to work, and I reassembled it again.
This time, making sure to test it between each and every step.
Having put the last screw back in its place, I once again fired it up.
This time I was treated to some lovely music out of the connected speaker, and the repair was finished.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://engsner.com/images/su-800/final-picture.jpg&#34;
         alt=&#34;The amplifier powered on.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Up and running!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>A new beginning</title>
      <link>https://engsner.com/posts/a-new-beginning/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engsner.com/posts/a-new-beginning/</guid>
      <description>&lt;p&gt;I bought this domain back in November last year, but I never ended up doing anything with it,
due in part to me trying to make it from scratch with Django.
However, I finally caved in and realized that it wouldn&amp;rsquo;t ever be finished that way.
Therefore, I have decided to run it using the &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; framework instead.&lt;/p&gt;
&lt;p&gt;The plan is to post the various projects I decide to tackle in my spare time,
as well as whatever else comes to mind.
Only time will tell what actually ends up happening though!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>